



Network Working Group                                         M. Thomson
Internet-Draft                                                   Mozilla
Intended status: Informational                          October 26, 2017
Expires: April 29, 2018


               The Harmful Consequences of Postel's Maxim
                 draft-thomson-postel-was-wrong-latest

Abstract

   Jon Postel's famous statement in RFC 1122 of "Be liberal in what you
   accept, and conservative in what you send" - is a principle that has
   long guided the design of Internet protocols and implementations of
   those protocols.  The posture this statement advocates might promote
   interoperability in the short term, but that short-term advantage is
   outweighed by negative consequences that affect the long-term
   maintenance of a protocol and its ecosystem.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on April 29, 2018.

Copyright Notice

   Copyright (c) 2017 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of



Thomson                  Expires April 29, 2018                 [Page 1]

Internet-Draft          Elephants Out, Donkeys In           October 2017


   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
   2.  Protocol Decay  . . . . . . . . . . . . . . . . . . . . . . .   3
   3.  The Long Term Costs . . . . . . . . . . . . . . . . . . . . .   4
   4.  Recognizing the Need for Protocol Maintenance . . . . . . . .   5
   5.  The Role of Feedback  . . . . . . . . . . . . . . . . . . . .   6
     5.1.  Fault Reporting is Valuable . . . . . . . . . . . . . . .   6
     5.2.  The Role of Fatal Errors  . . . . . . . . . . . . . . . .   6
   6.  Implementations Are Ultimately Responsible  . . . . . . . . .   7
   7.  Security Considerations . . . . . . . . . . . . . . . . . . .   8
   8.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   8
   9.  Informative References  . . . . . . . . . . . . . . . . . . .   8
   Appendix A.  Acknowledgments  . . . . . . . . . . . . . . . . . .   9
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .   9

1.  Introduction

   Of the great many contributions Jon Postel made to the Internet, his
   remarkable technical achievements are often ignored in favor of the
   design and implementation philosophy that he first captured in the
   original IPv4 specification [RFC0760]:

      In general, an implementation should be conservative in its
      sending behavior, and liberal in its receiving behavior.

   In comparison, his contributions to the underpinnings of the
   Internet, which are in many respects more significant, enjoy less
   conscious recognition.  Postel's principle has been hugely
   influential in shaping the Internet and the systems that use Internet
   protocols.  Many consider this principle to be instrumental in the
   success of the Internet as well as the design of interoperable
   protocols in general.

   Over time, considerable changes have occurred in both the scale of
   the Internet and the level of skill and experience available to
   protocol and software designers.  Much of that experience is with
   protocols that were designed, informed by Postel's maxim, in the
   early phases of the Internet.

   That experience shows that there are negative long-term consequences
   to interoperability if an implementation applies Postel's advice.
   Correcting the problems caused by divergent behavior in
   implementations can be difficult.




Thomson                  Expires April 29, 2018                 [Page 2]

Internet-Draft          Elephants Out, Donkeys In           October 2017


   It might be suggested that the posture Postel advocates was indeed
   necessary during the formative years of the Internet, and even key to
   its success.  This document takes no position on that claim.

   This document instead describes the negative consequences of the
   application of Postel's principle to the modern Internet.  In place
   of this principle, it is recommended that protocols receive
   continuing maintenance after their initial design and deployment.
   Active protocol maintenance reduces or eliminates the opportunities
   to apply Postel's advice.

   There is good evidence to suggest that designers of protocols in the
   IETF widely understand the limitations of Postel's principle.  This
   document serves primarily as a record of the shortcomings of His
   principle for the wider community.

2.  Protocol Decay

   Divergent implementations of a specification emerge over time.  When
   variations occur in the interpretation or expression of semantic
   components, implementations cease to be perfectly interoperable.

   Implementation bugs are often identified as the cause of variation,
   though it is often a combination of factors.  Application of a
   protocol to new and unanticipated uses, and ambiguities or errors in
   the specification are often confounding factors.

   Of course, situations where two peers disagree are common, and should
   be expected over the lifetime of a protocol.  Even with the best
   intentions, the pressure to interoperate can be significant.  No
   implementation can hope to avoid having to trade correctness for
   interoperability indefinitely.

   An implementation that reacts to variations in the manner advised by
   Postel sets up a feedback cycle:

   o  Over time, implementations progressively add new code to constrain
      how data is transmitted, or to permit variations in what is
      received.

   o  Errors in implementations, or confusion about semantics can
      thereby be masked.

   o  These errors can become entrenched, forcing other implementations
      to be tolerant of those errors.

   For example, the original JSON specification [RFC4627] omitted
   critical details on a range of points including Unicode handling,



Thomson                  Expires April 29, 2018                 [Page 3]

Internet-Draft          Elephants Out, Donkeys In           October 2017


   ordering and duplication of object members, and number encoding.
   Consequently, a range of interpretations were used by
   implementations.  An update [RFC7159] was unable to correct these
   errors, instead concentrating on defining the interoperable subset of
   JSON.  I-JSON [RFC7493] defines a new format that is substantially
   similar to JSON without the interoperability flaws.  I-JSON also
   intentionally omits some interoperability: an I-JSON implementation
   will fail to accept some valid JSON texts.  Consequently, most JSON
   parsers do not implement I-JSON.

   An entrenched flaw can become a de facto standard.  Any
   implementation of the protocol is required to replicate the aberrant
   behavior, or it is not interoperable.  This is both a consequence of
   applying Postel's advice, and a product of a natural reluctance to
   avoid fatal error conditions.  Ensuring interoperability in this
   environment is often colloquially referred to as aiming to be "bug
   for bug compatible".

   It is debatable as to whether decay can be completely avoided, but
   Postel's maxim encourages a reaction that compounds this issue.

3.  The Long Term Costs

   Once deviations become entrenched, there is little that can be done
   to rectify the situation.

   For widely used protocols, the massive scale of the Internet makes
   large-scale interoperability testing infeasible for all but a
   privileged few.  As the set of changes needed to maintain
   interoperability grows in size, the cost of building a new
   implementation increases.  This is particularly relevant as the set
   of tweaks necessary for interoperability can be difficult to learn.

   Consequently, new implementations can be restricted to niche uses,
   where the problems arising from interoperability issues can be more
   closely managed.

   This has a negative impact on the ecosystem of a protocol.  New
   implementations are important in ensuring the continued viability of
   a protocol.  New protocol implementations are also more likely to be
   developed for new and diverse use cases and often are the origin of
   features and capabilities that can be of benefit to existing users.

   These problems also reduce the ability of established implementations
   to change.  The accumulation of interoperability mitigations can be
   difficult to maintain, or even recognize in software.





Thomson                  Expires April 29, 2018                 [Page 4]

Internet-Draft          Elephants Out, Donkeys In           October 2017


4.  Recognizing the Need for Protocol Maintenance

   Postel's maxim is specifically valuable if the specification of a
   protocol is intended to remain unchanged for an extended period of
   time.  Indeed, in the face of divergent interpretations of an
   immutable specification, the only hope for an implementation to
   remain widely interoperable is to be tolerant of differences in
   interpretation and occasional outright implementation errors.

   From this perspective, application of Postel's advice to the
   implementation of a protocol specification that does not change is
   logical, even necessary.  But that suggests that the problem is with
   the presumption of immutability of specifications.

   Active maintenance of a protocol can ensure that specifications
   remain accurate and that new implementations are possible.  A
   maintained protocol is not a static construct, it improves and
   changes as it is used.

   Protocol designers are strongly encouraged to continue to maintain
   and evolve protocols beyond their initial inception and definition.
   Maintenance is needed in response to the discovery of errors in
   specification that might cause interoperability issues.  Maintenance
   is also critical for ensuring that the protocol is viable for
   application to use cases that might not have been envisaged during
   its original design.  New use cases are an indicator that the
   protocol could be successful [SUCCESS].

   Maintenance does not demand the development of new versions of
   protocols or protocol specifications.  For instance, RFC 793 [TCP]
   remains the canonical TCP reference, but that document alone is no
   longer sufficient to implement the protocol.  TCP is the subject of a
   very large number of update and extension RFCs that together document
   the deployed protocol.

   Good extensibility [EXT] can make it easier to respond to new use
   cases or changes in the environment in which the protocol is
   deployed.

   The process of maintenance ideally begins even before the
   specification for a protocol is complete.  Neglect can quickly
   produce the negative consequences this document describes.
   Restarting maintenance could involve first discovering the properties
   of the protocol as it is deployed, rather than the protocol as it was
   originally document.  This can be time-consuming, particularly if the
   protocol has a diverse set of implementations.  Such a process was
   undertaken for HTTP [HTTP] after a period of minimal maintenance.




Thomson                  Expires April 29, 2018                 [Page 5]

Internet-Draft          Elephants Out, Donkeys In           October 2017


   Restoring the specification to currency took significant effort over
   more than 6 years.

5.  The Role of Feedback

   Protocol maintenance is only possible if there is sufficient
   information about the implementation, deployment and use of the
   protocol.  A such, feedback is critical to effective maintenance.

   For a protocol specification, the primary and most effective form of
   feedback comes from people who implement or deploy the protocol.  An
   active community around a particular protocol is the most valuable
   source of feedback.  It is the community that implements and deploys
   changes, in addition to contributing to the ongoing maintenance of
   protocol specifications.

   A community benefits from having a venue for discussion.  An outlet
   where questions, issues, or new use cases can be taken can also be
   where maintenance occurs.  Ensuring that the venue remains available
   ensures that critical feedback is not lost for lack of a medium for
   providing it.  This might mean retaining mailing lists, specification
   repositories, and issue trackers past the point that a specification
   is initially published.  The easier it is for an individual to
   provide feedback on their own terms, the more likely they are to
   provide it.

5.1.  Fault Reporting is Valuable

   Protocol implementations should to include error reporting mechanisms
   that ensure errors are surfaced in a visible and expedient fashion.

   Exposing faults through operations and management systems is highly
   valuable, but it might be necessary to ensure that the information is
   propagated.  Building telemetry and error logging systems that report
   faults to the developers of the implementation is superior in many
   respects.  However, this is only possible in deployments that are
   conducive to the collection of this type of information.  Due
   consideration to protecting the privacy of protocol participants is
   critical prior to deploying any such system.

5.2.  The Role of Fatal Errors

   The primary failing of automated reporting systems is their inability
   to recognize and collect information about abberant conditions.
   Generating fatal errors in place of attempting recovery can ensure
   that faults are immediately visible.  For instance, a practice of
   triggering a crash in response to unexpected conditions allows a
   generic crash reporting system to be used to identify faults.  Fatal



Thomson                  Expires April 29, 2018                 [Page 6]

Internet-Draft          Elephants Out, Donkeys In           October 2017


   errors or crashes are also preferable if there is any risk that the
   error might represent an implementation or security issue.

   A fatal error provides excellent motivation for addressing problems.
   In contrast, generating warnings provide no incentive to fix a
   problem as the system remains operational.  Generating fatal errors
   is only feasible if such errors are sufficiently rare.  Users can
   become inured to problems if they are frequent and ignore them,
   whereas rare events demand greater attention.

   Exposing errors is particularly important for early implementations
   of a protocol.  This helps validate a protocol during its design.  If
   early implementations are then used more widely, having those
   implementations generate errors in response to divergent behavior
   better enables the detection and correction of errors in new
   implementations.

   This doesn't mean that protocol implementations need to treat all
   inputs equally strictly.  A protocol might be intentionally designed
   to be tolerant of a wide range of inputs (see for example [HTML]).
   As long as proper reactions to inputs are clearly and unambiguously
   specified, these considerations don't apply.

6.  Implementations Are Ultimately Responsible

   Implementations and deplotments are critical to the ongoing
   maintenance of a protocol.  Implementation, deployment and use of a
   protocol is the primary source of information about that protocol.
   The application of any tool to real use cases is where problems and
   use cases are discovered.

   Implementations have ample motivation to prefer stability and
   interoperability over maintenance or correctness.  It is likely that
   - over time - an implementation will accumulate allowances for errors
   of specification or implementation.  This can lead to suppression of
   feedback about errors.

   Even when an implementation chooses to attempt to adapt to an
   abnormal condition, communicating that decision to the community
   minimally allows others to benefit from knowledge of the problem.
   Discussion about problems might also lead to alternative strategies
   or protocol enhancements that can avoid further problems.

   Over time, mitigations for interoperability issues could become
   redundant.  Occasional review of any special interoperability
   measures might reveal opportunities for an implementation to switch
   to stricter handling of exceptional conditions.  Removing special




Thomson                  Expires April 29, 2018                 [Page 7]

Internet-Draft          Elephants Out, Donkeys In           October 2017


   allowances in favor of stricter error reporting restores feedback
   measures that new implementations can then benefit from.

   Managing and deploying changes can be expensive.  However, it is
   widely recognized that maintenance is a critical part of the
   deployment of computer systems for security reasons [IOTSU].
   Managing updates for interoperability problems represents a small
   additional cost in exchange for ensuring the ability to interoperate
   with other users of the network.

7.  Security Considerations

   Sloppy implementations, lax interpretations of specifications, and
   uncoordinated extrapolation of requirements to cover gaps in
   specification can result in security problems.  Hiding the
   consequences of protocol variations encourages the hiding of issues,
   which can conceal bugs and make them difficult to discover.

   Designers and implementers of security protocols generally understand
   these concerns.  However, general-purpose protocols are not exempt
   from careful consideration of security issues.  Furthermore, because
   general-purpose protocols tend to deal with flaws or obsolescence in
   a less urgent fashion than security protocols, there can be fewer
   opportunities to correct problems in protocols that develop
   interoperability problems.

8.  IANA Considerations

   This document has no IANA actions.

9.  Informative References

   [EXT]      Carpenter, B., Aboba, B., Ed., and S. Cheshire, "Design
              Considerations for Protocol Extensions", RFC 6709,
              DOI 10.17487/RFC6709, September 2012,
              <https://www.rfc-editor.org/info/rfc6709>.

   [HTML]     "HTML", WHATWG Living Standard, October 2017,
              <https://html.spec.whatwg.org/>.

   [HTTP]     Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Message Syntax and Routing",
              RFC 7230, DOI 10.17487/RFC7230, June 2014,
              <https://www.rfc-editor.org/info/rfc7230>.







Thomson                  Expires April 29, 2018                 [Page 8]

Internet-Draft          Elephants Out, Donkeys In           October 2017


   [IOTSU]    Tschofenig, H. and S. Farrell, "Report from the Internet
              of Things Software Update (IoTSU) Workshop 2016",
              RFC 8240, DOI 10.17487/RFC8240, September 2017,
              <https://www.rfc-editor.org/info/rfc8240>.

   [RFC0760]  Postel, J., "DoD standard Internet Protocol", RFC 760,
              DOI 10.17487/RFC0760, January 1980,
              <https://www.rfc-editor.org/info/rfc760>.

   [RFC4627]  Crockford, D., "The application/json Media Type for
              JavaScript Object Notation (JSON)", RFC 4627,
              DOI 10.17487/RFC4627, July 2006,
              <https://www.rfc-editor.org/info/rfc4627>.

   [RFC7159]  Bray, T., Ed., "The JavaScript Object Notation (JSON) Data
              Interchange Format", RFC 7159, DOI 10.17487/RFC7159, March
              2014, <https://www.rfc-editor.org/info/rfc7159>.

   [RFC7493]  Bray, T., Ed., "The I-JSON Message Format", RFC 7493,
              DOI 10.17487/RFC7493, March 2015,
              <https://www.rfc-editor.org/info/rfc7493>.

   [SUCCESS]  Thaler, D. and B. Aboba, "What Makes for a Successful
              Protocol?", RFC 5218, DOI 10.17487/RFC5218, July 2008,
              <https://www.rfc-editor.org/info/rfc5218>.

   [TCP]      Postel, J., "Transmission Control Protocol", STD 7,
              RFC 793, DOI 10.17487/RFC0793, September 1981,
              <https://www.rfc-editor.org/info/rfc793>.

Appendix A.  Acknowledgments

   Constructive feedback on this document has been provided by a
   surprising number of people including Mark Nottingham, Brian
   Trammell, and Anne Van Kesteren.  Please excuse any omission.

Author's Address

   Martin Thomson
   Mozilla

   Email: martin.thomson@gmail.com









Thomson                  Expires April 29, 2018                 [Page 9]
